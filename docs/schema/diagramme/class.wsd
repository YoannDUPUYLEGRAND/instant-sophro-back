@startuml Rôle

'---------------------------
'  Enums
'---------------------------
package "constant" {
  enum UserRole {
    ADMIN
    MANAGER
    USER
    GUEST
  }

  enum LogLevel {
    TRACE
    DEBUG
    INFO
    WARN
    ERROR
  }
}

'---------------------------
'  Model
'---------------------------
package "model" {
  class User {
    - Long id
    - String username
    - String password
    - UserRole role

    + User(Long id, String username, String password, UserRole role)
  }

  class Product {
    - Long id
    - String name
    - String description
    - Double price
    - int stock

    + Product(Long id, String name, String description, Double price, int stock)
  }

  class Category {
    - Long id
    - String name

    + Category(Long id, String name)
  }

  class Order {
    - Long id
    - Date date
    - String status
    - User user

    + Order(Long id, Date date, String status, User user)
  }

  class OrderLine {
    - Long id
    - int quantity
    - Order order
    - Product product

    + OrderLine(Long id, int quantity, Order order, Product product)
  }
}

model.User "1" -- "N" model.Order : creates
model.Order "1" -- "N" model.OrderLine : contain
model.OrderLine "N" -- "1" model.Product : refer
model.Product "N" -- "1" model.Category : belongs

'---------------------------
'  Repository (DAO)
'---------------------------
package "repository" {
  interface UserRepository {
    + Optional<User> findByUsername(String username)
    + ...
  }

  interface ProductRepository {
    + ...
  }

  interface OrderRepository {
    + ...
  }

  interface CategoryRepository {
    + ...
  }
}

UserRepository -down-|> "org.springframework.data.jpa.repository.JpaRepository"
ProductRepository -down-|> "org.springframework.data.jpa.repository.JpaRepository"
OrderRepository -down-|> "org.springframework.data.jpa.repository.JpaRepository"
CategoryRepository -down-|> "org.springframework.data.jpa.repository.JpaRepository"

'---------------------------
'  Contrat (Interfaces de service)
'---------------------------
package "contrat" {
  interface IAuthService {
    + String login(String username, String password)
    + void logout(String token)
    + UserDTO register(RegisterDTO dto)
    + UserDTO getCurrentUser(String token)
    + String refreshToken(String refreshToken)
    + void forgotPassword(String email)
    + void resetPassword(String resetToken, String newPwd)
  }

  interface IUserService {
    + List<UserDTO> getAllUsers()
    + UserDTO getUserById(Long id)
    + UserDTO updateUser(Long id, UserDTO dto)
    + void deleteUser(Long id)
    + UserDTO changeUserRole(Long id, UserRole newRole)
  }

  interface IProductService {
    + ProductDTO createProduct(ProductDTO dto)
    + List<ProductDTO> getAllProducts()
    + ProductDTO getProductById(Long id)
    + ProductDTO updateProduct(Long id, ProductDTO dto)
    + void deleteProduct(Long id)
  }

  interface IOrderService {
    + OrderDTO createOrder(OrderDTO dto, Long userId)
    + OrderDTO createOrderAsGuest(OrderDTO dto)
    + OrderDTO getOrderById(Long id)
    + List<OrderDTO> getAllOrders()
    + List<OrderDTO> getOrdersByUser(Long userId)
    + OrderDTO updateOrderStatus(Long id, String newStatus)
    + void deleteOrder(Long id)

    'Méthodes "métier" (5 exemples)
    + OrderDTO applyPromotionCode(Long orderId, String promoCode)
    + double calculateOrderTotal(Long orderId)
    + boolean checkInventoryForOrder(Long orderId)
    + void sendOrderConfirmationEmail(Long orderId, String email)
    + OrderDTO cancelOrder(Long orderId)
  }

  interface ICategoryService {
    + CategoryDTO createCategory(CategoryDTO dto)
    + List<CategoryDTO> getAllCategories()
    + CategoryDTO getCategoryById(Long id)
    + CategoryDTO updateCategory(Long id, CategoryDTO dto)
    + void deleteCategory(Long id)
  }
}

'---------------------------
'  Services (Impl)
'---------------------------
package "service" {
  class AuthServiceImpl {
    + String login(String username, String password)
    + void logout(String token)
    + UserDTO register(RegisterDTO dto)
    + UserDTO getCurrentUser(String token)
    + String refreshToken(String refreshToken)
    + void forgotPassword(String email)
    + void resetPassword(String resetToken, String newPwd)
  }

  class UserServiceImpl {
    + List<UserDTO> getAllUsers()
    + UserDTO getUserById(Long id)
    + UserDTO updateUser(Long id, UserDTO dto)
    + void deleteUser(Long id)
    + UserDTO changeUserRole(Long id, UserRole newRole)
  }

  class ProductServiceImpl {
    + ProductDTO createProduct(ProductDTO dto)
    + List<ProductDTO> getAllProducts()
    + ProductDTO getProductById(Long id)
    + ProductDTO updateProduct(Long id, ProductDTO dto)
    + void deleteProduct(Long id)
  }

  class OrderServiceImpl {
    + OrderDTO createOrder(OrderDTO dto, Long userId)
    + OrderDTO createOrderAsGuest(OrderDTO dto)
    + OrderDTO getOrderById(Long id)
    + List<OrderDTO> getAllOrders()
    + List<OrderDTO> getOrdersByUser(Long userId)
    + OrderDTO updateOrderStatus(Long id, String newStatus)
    + void deleteOrder(Long id)

    + OrderDTO applyPromotionCode(Long orderId, String promoCode)
    + double calculateOrderTotal(Long orderId)
    + boolean checkInventoryForOrder(Long orderId)
    + void sendOrderConfirmationEmail(Long orderId, String email)
    + OrderDTO cancelOrder(Long orderId)
  }

  class CategoryServiceImpl {
    + CategoryDTO createCategory(CategoryDTO dto)
    + List<CategoryDTO> getAllCategories()
    + CategoryDTO getCategoryById(Long id)
    + CategoryDTO updateCategory(Long id, CategoryDTO dto)
    + void deleteCategory(Long id)
  }
}

contrat.IAuthService <|.. service.AuthServiceImpl
contrat.IUserService <|.. service.UserServiceImpl
contrat.IProductService <|.. service.ProductServiceImpl
contrat.IOrderService <|.. service.OrderServiceImpl
contrat.ICategoryService <|.. service.CategoryServiceImpl

'---------------------------
'  Controllers
'---------------------------
package "controller" {
  class AuthController {
    + ResponseEntity<String> login(LoginDTO dto)
    + ResponseEntity<Void> logout(String token)
    + ResponseEntity<UserDTO> register(RegisterDTO dto)
    + ResponseEntity<UserDTO> getCurrentUser(String token)
    + ResponseEntity<String> refreshToken(String refreshToken)
    + ResponseEntity<Void> forgotPassword(String email)
    + ResponseEntity<Void> resetPassword(ResetPasswordDTO dto)
  }

  class UserController {
    + ResponseEntity<List<UserDTO>> getAllUsers()
    + ResponseEntity<UserDTO> getUserById(Long id)
    + ResponseEntity<UserDTO> updateUser(Long id, UserDTO dto)
    + ResponseEntity<Void> deleteUser(Long id)
    + ResponseEntity<UserDTO> changeUserRole(Long id, UserRole newRole)
  }

  class ProductController {
    + ResponseEntity<ProductDTO> createProduct(ProductDTO dto)
    + ResponseEntity<List<ProductDTO>> getAllProducts()
    + ResponseEntity<ProductDTO> getProductById(Long id)
    + ResponseEntity<ProductDTO> updateProduct(Long id, ProductDTO dto)
    + ResponseEntity<Void> deleteProduct(Long id)
  }

  class OrderController {
    + ResponseEntity<OrderDTO> createOrder(OrderDTO dto, Long userId)
    + ResponseEntity<OrderDTO> createOrderAsGuest(OrderDTO dto)
    + ResponseEntity<OrderDTO> getOrderById(Long id)
    + ResponseEntity<List<OrderDTO>> getAllOrders()
    + ResponseEntity<List<OrderDTO>> getOrdersByUser(Long userId)
    + ResponseEntity<OrderDTO> updateOrderStatus(Long id, String newStatus)
    + ResponseEntity<Void> deleteOrder(Long id)

    + ResponseEntity<OrderDTO> applyPromotionCode(Long orderId, String promoCode)
    + ResponseEntity<Double> calculateOrderTotal(Long orderId)
    + ResponseEntity<Boolean> checkInventoryForOrder(Long orderId)
    + ResponseEntity<Void> sendOrderConfirmationEmail(Long orderId, String email)
    + ResponseEntity<OrderDTO> cancelOrder(Long orderId)
  }

  class CategoryController {
    + ResponseEntity<CategoryDTO> createCategory(CategoryDTO dto)
    + ResponseEntity<List<CategoryDTO>> getAllCategories()
    + ResponseEntity<CategoryDTO> getCategoryById(Long id)
    + ResponseEntity<CategoryDTO> updateCategory(Long id, CategoryDTO dto)
    + ResponseEntity<Void> deleteCategory(Long id)
  }
}

AuthController --> IAuthService
UserController --> IUserService
ProductController --> IProductService
OrderController --> IOrderService
CategoryController --> ICategoryService

'---------------------------
'  LoggerUtils (exemple)
'---------------------------
package "utils" {
  class LoggerUtils {
    + static void log(LogLevel level, String message)
  }
}

@enduml